/*
    This file implements the pairwise compairsons functions.
    The header file has the prototypes.

*/

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>    
#include "pairwise.h"

/*

    num_pairwise_comp:
    
        This method will take the number of sequences and
        find out how many comparisons we will be making.
        This is the formula:
            n(n-1)/2
    
*/
int num_pairwise_comp(int num_seq)
{
    int num_comparisons = num_seq*(num_seq - 1)/2;
    return num_comparisons;
}


/*

    get_align_size:
        This method takes in the file name of the alignment.
        It then runs through the first sequence and counts 
        how large it is.
    
*/
int get_align_size(char *file_name)
{
    FILE *fp;
    fp = fopen(file_name , "r");
    if(fp == NULL){
        printf("Unable to open the input file.\n");
        exit(-1);
    }

    // Our buffer and our alignment_length
    char buffer[1000];
    int aln_len = 0;
    // We'll start at -1 so we get to 0 during the first seq header
    int i = -1;
    // Assume that the first sequence is the same as the last sequence.
    while( (fgets(buffer, 1000, fp) != NULL) && (i < 1)){
        if(strchr(buffer, '>')){
            i++;
        }
        else{
            int str_len = strlen(buffer) - 1;
            aln_len += str_len;
        }
    }
    fclose(fp);
    return aln_len;
}


/*
    
    read_alignment:
        Here we're going to read our file in.
        We then will need to return all the sequences
        as an array of strings.    

*/
int read_alignment(string file_name, int num_seq, string *all_seqs)
{
    
    // First, we need to find the alignment size
    int aln_len = get_align_size(file_name);
    
    FILE *fp;
    fp = fopen(file_name , "r");
    if(fp == NULL){
        printf("Unable to open the input file.\n");
        exit(-1);
    }
    else{
        printf("Opened the alignment: %s!\n", file_name);
    }
    printf("The length of the alignment: %i\n", aln_len);
    char temp_seq[aln_len];
    char buffer[1000];
    
    // We'll start at -1 so we get to 0 during the first seq header
    int i = -1;
    while( fgets(buffer, 1000, fp) != NULL){
        // This will have to be after the first sequence
        if (strchr(buffer, '>') && i > -1){
            all_seqs[i] = malloc(strlen(temp_seq) + 1);
            strcpy(all_seqs[i], temp_seq);
            temp_seq[0] = '\0';
            i++;
        }
        // This will be the first sequence
        else if(strchr(buffer, '>')){
            temp_seq[0] = '\0';
            i++;
        }
        else{
            int str_len = strlen(buffer);
            buffer[str_len-1] = '\0';
            //temp_seq = &buffer[0];
            strcat(temp_seq, buffer);        
        }

        
    }
    all_seqs[i] = malloc(strlen(temp_seq) + 1);
    strcpy(all_seqs[i], temp_seq);
    fclose(fp);
    return aln_len;
}


/*
    
    get_max_dist:
        

*/
void calculate_hamming_dists(float *comparisons, int num_comparisons, string *all_seqs, int aln_len, int num_seqs)
{
    int i, j, offset;
    // Our i variable is going to track the sequence number
    for(i = 0; i < num_seqs; i++){
        offset = 1;
        // Our j variable is going to track the alignment position
        for(j = 0; j < aln_len; j++){
            char position1, position2;
            if(offset == num_seqs){
                break;
            }
            else{
                position1 = all_seqs[i][j];
                position2 = all_seqs[i + offset][j];
                printf("Seq1: %i Seq2: %i \t Position: %i Offset: %i \t Char1: %c Char2: %c\n", i, i+offset, offset, j, position1, position2);
                offset++;
            }
        }
        printf("BOOM");

    }
    
}


/*
    
    get_max_dist:
        

*/
float get_max_dist()
{

}

/*
    
    get_avg_dist:

*/
float get_avg_dist()
{

}
/*

    get_min_dist:


*/
float get_min_dist()
{

}






